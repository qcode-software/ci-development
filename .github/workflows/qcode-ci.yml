name: 'Qcode CI'

on:
  workflow_call:
    inputs:
      max_line_length:
        description: 'The maximum number of characters that a line can be.'
        default: 90
        required: false
        type: number
      max_file_length:
        description: 'The maximum number of lines that a file can be.'
        default: 500
        required: false
        type: number
      max_proc_body_length:
        description: 'The maximum number of lines that a proc body can be.' 
        default: 80
        required: false
        type: number
      check_line_lengths:
        description: 'Flag for checking line lengths.'
        default: true
        required: false
        type: boolean
      check_proc_names:
        description: 'Flag for checking that proc names are prefixed with the file name.'
        default: true
        required: false
        type: boolean
      check_procs_have_unit_tests:
        description: 'Flag for checking that procs have unit tests.'
        default: true
        required: false
        type: boolean
      check_file_lengths:
        description: 'Flag for checking file lengths.'
        default: true
        required: false
        type: boolean
      check_proc_lengths:
        description: 'Flag for checking proc body lengths.'
        default: true
        required: false
        type: boolean
      check_proc_comments:
        description: 'Flag for checking that procs have a #| comment.'
        default: true
        required: false
        type: boolean
      files:
        description: 'List of files to check for changes.'
        required: true
        type: string
      test_directory:
        description: 'Directory within the repository where test files are located.'
        default: test
        required: false
        type: string
      tcl_directory:
        description: 'Directory within the repository where Tcl files are located.'
        default: tcl
        required: false
        type: string

jobs:
  linting:
    runs-on: ubuntu-latest
    env:
      scripts_path: ${{ github.workspace }}/qcode-ci/scripts
    steps:
      - name: Dependencies
        run: |
          wget https://debian.qcode.co.uk/packages.key
          gpg --no-default-keyring --keyring ./temp-keyring.gpg --import packages.key
          gpg --no-default-keyring --keyring ./temp-keyring.gpg --export --output qcode-packages.gpg
          rm temp-keyring.gpg
          sudo mv qcode-packages.gpg /etc/apt/keyrings/
          echo "deb [signed-by=/etc/apt/keyrings/qcode-packages.gpg] https://debian.qcode.co.uk buster main" | sudo tee /etc/apt/sources.list.d/qcode.list
          sudo apt-get update
          sudo apt-get install -y tcl tcllib tdom tclcurl libpgtcl qcode-linter-2.3.0

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Checkout Qcode CI
        uses: actions/checkout@v3
        with:
          repository: qcode-software/ci-development
          path: qcode-ci

      - name: Get Changed Tcl Script Files
        id: changed-files
        uses: tj-actions/changed-files@v35.9.2
        with:
          files: ${{ inputs.files }}

      - name: Check for Lines Exceeding Max Chars
        id: check-line-length
        if: >
          always()
          && steps.changed-files.outcome == 'success'
          && inputs.check_line_lengths
          && steps.changed-files.outputs.any_changed == 'true'
        run: |
          cd ${{ env.scripts_path }}
          tclsh line-length-check.tcl \
            ${{ inputs.max_line_length }} \
            ${{ github.workspace }} \
            ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Check for Proc Names Not Prefixed with File Name
        if: >
          always()
          && steps.changed-files.outcome == 'success'
          && inputs.check_proc_names
          && steps.changed-files.outputs.any_changed == 'true'
        run: |
          cd ${{ env.scripts_path }}
          tclsh proc-name-check.tcl \
            ${{ github.workspace }} \
            ${{ inputs.tcl_directory }} \
            ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Check for Proc Bodies Exceeding Max Lines
        if: >
          always()
          && steps.changed-files.outcome == 'success'
          && inputs.check_proc_lengths
          && steps.changed-files.outputs.any_changed == 'true'
        run: |
          cd ${{ env.scripts_path }}
          tclsh proc-length-check.tcl \
            ${{ inputs.max_proc_body_length }} \
            ${{ github.workspace }} \
            ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Check Procs Have Unit Tests
        if: >
          always()
          && steps.changed-files.outcome == 'success'
          && inputs.check_procs_have_unit_tests
          && steps.changed-files.outputs.any_changed == 'true'
        run: |
          cd ${{ env.scripts_path }}
          tclsh procs-have-unit-tests-check.tcl \
            ${{ github.workspace }} \
            ${{ inputs.test_directory }} \
            ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Check for Files Exceeding Max Lines
        if: >
          always()
          && steps.changed-files.outcome == 'success'
          && inputs.check_file_lengths
          && steps.changed-files.outputs.any_changed == 'true'
        run: |
          cd ${{ env.scripts_path }}
          tclsh file-length-check.tcl \
            ${{ inputs.max_file_length }} \
            ${{ github.workspace }} \
            ${{ steps.changed-files.outputs.all_changed_files }}

      - name: 'Check Procs Have #| Comments'
        if: >
          always()
          && steps.changed-files.outcome == 'success'
          && inputs.check_proc_comments
          && steps.changed-files.outputs.any_changed == 'true'
        run: |
          cd ${{ env.scripts_path }}
          tclsh proc-comment-check.tcl \
            ${{ github.workspace }} \
            ${{ steps.changed-files.outputs.all_changed_files }}
